/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using InfluxDB.Client.Api.Domain;
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace InfluxDB.Flux.Builder.Parameterization
{
    /// <summary>
    /// Represents floating point numbers according to the double representations defined by the IEEE-754-1985.
    /// </summary>
    [DataContract]
    public partial class FloatLiteral : Expression, IEquatable<FloatLiteral>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FloatLiteral" /> class.
        /// </summary>
        /// <param name="type">Type of AST node.</param>
        /// <param name="value">A <see cref="float"/> value.</param>
        public FloatLiteral(string type, float value) : base()
        {
            Type = type;
            Value = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FloatLiteral" /> class.
        /// </summary>
        /// <param name="type">Type of AST node.</param>
        /// <param name="value">A <see cref="double"/> value.</param>
        public FloatLiteral(string type, double value) : base()
        {
            Type = type;
            Value = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FloatLiteral" /> class.
        /// </summary>
        /// <param name="type">Type of AST node.</param>
        /// <param name="value">A <see cref="decimal"/> value.</param>
        public FloatLiteral(string type, decimal value) : base()
        {
            Type = type;
            Value = value;
        }

        /// <summary>
        /// Type of AST node.
        /// </summary>
        /// <value>Type of AST node.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets a <see cref="float"/>, <see cref="double"/> or <see cref="decimal"/> value.
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public object Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FloatLiteral {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FloatLiteral);
        }

        /// <summary>
        /// Returns true if FloatLiteral instances are equal
        /// </summary>
        /// <param name="input">Instance of FloatLiteral to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FloatLiteral? input)
        {
            if (input == null)
            {
                return false;
            }

            return base.Equals(input) &&
                   (
                       Type == input.Type ||
                       Type != null && Type.Equals(input.Type)
                   ) && base.Equals(input) &&
                   (
                       Value == input.Value ||
                       Value != null && Value.Equals(input.Value)
                   );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();

                if (Type != null)
                {
                    hashCode = hashCode * 59 + Type.GetHashCode();
                }

                if (Value != null)
                {
                    hashCode = hashCode * 59 + Value.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}
